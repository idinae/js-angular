1. ПЪРВИ СТЪПКИ
   - npm i -g @angular/cli
   - ng new my-app
   - cd my-app
   - ng s

   ! ако даден модул не тръгва, значи липсва в app.module.ts - добавяме го ръчно
   тест: <input type="text" [(ngModel)]="name">  <-- тук name е пропъртито, което се взима от input-а и предава като output; ползваме го чрез ngModel, който се импортва от FormsModule, @angular/forms, добавя се и в imports
    <p>{{ name }}</p>

2. КОМПОНЕНТИ
   = компонентата е js клас 
!  - npm i --save bootstrap@3  <-- ако решим да ползваме bootstrap, v.3
   - angular.json-architect-build-stypes: добавя се на 1-во място "node_modules/bootstrap/dist/css/bootstrap.min.css"
   - създаваме нова папка server и файл server.component.ts
   - добавя се декоратор @Component({}) <-- вътре има JS, представляващ метаданни за класа
   - добавяме компонентите в декларациите на app.module.ts, @NgModule
   - в app.module.ts, imports се добавят други модули
   - ng g c server - вместо да се създават ръчно
   - constructor: setTimeout(() => { this.allowNewServer = true; }, 2000); - трябва да се bind-не, за да работи --> 
   - property binding --> []="" - в server.component.html [disabled] се слага в [] скоби = dynamic property binding
   - event binding --> ()="" - (click)="onCreateServer()"
     : (input)="onUpdatedServerName($event)" $event <- запазената променлива event, която ни дава достъп до данните на event-a
     : взимаме аргумента $event и го предаваме на ф-цията - може да го console.log()
     : target е елемента, върху който се е случило събитието
     : target.value e value на input-a
     : event: Event - имаме такъв тип
   - two-way data binding --> [()] - зависи от друг input, който е output към друг елемент - реагира на събития в двете посоки

3. ДИРЕКТИВИ
   = директивите са инструкции в DOM
   = обикновено ги добавяме със селектора за атрибути
   - @Directive({selector: '[appTurnGreen]'}) --> <p appTurnGreen>Green</p>
   a/ структурни директиви - променят структурата на DOM: *ngIf, *ngFor, добавят и премахват елементи
   б/ attribute directives - променят елемента върху който са поставени: ngStyle, ngClass; в html елемента се слагат в [] - property binding
! Math.randon() - връща случайна стойност между 0 и 1, floating point
      : ngStyle - позволява динамично да променяме стила
        -> в конструктора: this.serverStatus = Math.random() > 0.5 ? 'online' : 'offline';
        -> в <p> на html-а: <p [ngStyle]="{backgroundColor: getColor()}"> - очаква JS, key: value
      : ngClass - позволява динамично да добавяме или премахваме css-класове
        -> в компонентата добавяме styles: [`.online {color: white;}`]
        -> в html-а добавяме [ngClass]="{online: serverStatus === 'online'}" - двойка стил: условие - добавя стил, ако условието е true, т.е. стилът е online, ако serverStatus e online