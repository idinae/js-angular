I. НАСТРОЙКА НА СРЕДАТА
    - npm i -g @angular/cli <- освен ако не е инсталирано
    - ng new new-app
    - cd new-app
    - npm i --save bootstrap@3 <- bootstrap v.3
      : в angular.json-architect-build-styles: добавяме "node_modules/bootstrap/dist/css/bootstrap.min.css"
    - ng s
    - трием и тестваме app.component.html с bootstrap

II. АНАЛИЗИРАМЕ АРХИТЕКТУРАТА
    - какви компоненти ще са ни необходими, каква е връзката помежду им

III. СЪЗДАВАНЕ НА КОМПОНЕНТИТЕ
  1. HEADER
    - папка header в app/ с файлове .ts (@Component със selector и templateUrl) и .html
    - в app.module.ts:
      : добавяме HeaderComponent в declarations
      : импортваме го в началото с import { HeaderComponent } from "./...";
  2. RECIPES
    = компонент, който ще държи елемента, в него ще има details
    - ng g c recipes --skipTests true <- за да не създава тестови файл
  3. RECIPE-LIST
    = в папката recipes
    - ng g c recipes/recipe-list --skipTests true
  4. RECIPE-DETAIL
    - ng g c recipes/recipe-detail --skipTests true
  5. RECIPE-ITEM
    = в папката recipe-list
    - ng g c recipes/recipe-list/recipe-item --skipTests true
  6. SHOPPING-LIST
    - ng g c shopping-list --skipTests true
  7. SHOPPING-EDIT
    - ng g c shopping-list/shopping-edit --skipTests true

IV. ПОДРЕЖДАМЕ КОМПОНЕНТИТЕ
  1. В app.component.html слагаме селектора <app-recipes>, под него <app-shopping-list>
  2. В recipes.component.html правим .row, .col-md-5, .col-md-7 <- две колони, съотв. за recipe-list и recipe-detail
  3. В recipe-list.component.html слагаме recipe-item (само селектора)
  4. В shopping-list.component.html слагаме .row, .col-xs-10 (широка колона) и в нея shopping-edit селектора

V. ДОБАВЯМЕ СЪДЪРЖАНИЕ НА КОМПОНЕНТИТЕ
  1. В header.component.html добавяме меню и drop-down меню
  2. Създаваме модел Recipe
    = моделът е typescript файл, клас
    = определя как ще изглежда отделната рецепта
  3. Recipe-list
    - в recipe-list.component създаваме масив recipes = [];
    - в папка recipes създаваме файл recipe.model.ts
    - задаваме тип на масива resipes: recipes: Recipe[] = [], като импортваме модела
    - създаваме една рецепта в масива: new Recipe()
    - в recipe-list.component.html: *ngFor, {{ recipe.name }}, ...
  4. Recipe-detail
    - recipe-detail.component.html - правим го
  5. Shopping-list
    - правим html-а
    - в ts-файла - добавяме ingredients = [];
  6. Ingredients модел
    - създаваме папка app/shared и в нея ingredient.model.ts (съкратен вариант)
    - в shopping-list.component.ts го импортваме и ползваме като тип на масива ingredients
      : добавяме и нов Ingredient('')
  7. Shopping-edit
    - html

VI. DEBUGGING
  1. EXCEPTION: inline template:4:6 <- line, column, но не в нашите файлове
  2. AUGURY - chrome extension

V. DATA BINDING
! Всички пропъртита се виждат само в рамките на компонентата
! Ако искаме да ги достъпваме отвън, трябва да добавим декоратор към пропъртито 
  -> слагаме @Input() преди декларацията на пропъртито, трябва да го импортнем от @angular/core
  = така може да се достъпва от всеки html компонент, в който има селектор към това пропърти
! Ако искаме да достъпим метод отвън (от app.component.ts напр.) - правим нов метод, който да слуша, напр. (serverCreated)="onServerAdded($event)", който слагаме при селектора
  -> този метод, който слуша, се декларира в компонентата, от която идва, напр. @Output() serverCreated = new EventEmitter<{serverName: string, serverContent: string}>();, което се импортва от @angular/core
! EventEmitter<{}>() е обект в angular framework, който ни позволява да емитваме собствени събития (to emit your own events)
  -> в компонентата, от която идва, имаме функция onAddServer() {this.serverCreated.emit({serverName: this.newServerName, serverContent: this.newServerContent});} <- емитва събитието

  1. VIEW ENCAPSULATION
  -> в декоратора на ts-файла добавяме encapsulation: ViewEncapsulation.none (Emulated е дефолт, т.е има, ShadowDom e същото, но само в браузърите, които имат) -> даденият елемент не ползва вече енкапсулация и ако се добави стил в него - прилага се глобално!

  2. LOCAL REFERENCE
! може да се слага върху всеки елемент: #serverNameInput 
  - това е референция към целия html елемент; ползва се вместо two-way binding
  - може да се използват навсякъде в приложението, но само в html-ите

  3. ViewChild
  ! @ViewChild('serverContentInput', {static: true}) serverContentInput: ElementRef;
    -> добавя се втори аргумент на ф-цията {static: true} САМО ако смятаме да достъпваме елемента в ngOnInit()
    = начин да получим достъп до всеки елемент директно от ts кода преди да извикаме метода:
      : @ViewChild('serverContentInput') serverContentInput: ElementRef <- в ts файла
      : стойността на serverContentInput се достъпва: this.serverContentInput.nativeElement.value;
    - @ContentChild('')

! Т.е. locar references могат да се подават на методи или могад да се fetch-ват от @ViewChild
! Не бива да се променят DOM елементите по този начин, въпреки че може!

  4. NG директива <ng-content> - чрез този селектор се маркира мястото в компонентата, където ще се слага текст; а html кода за текста се поставя в app.component.html - между отварящата и затварящата скоба на селектора на компонентата

VI. LIFE CYCLE HOOKS
  1. ngOnChanges - called after a bound input property changes
  2. ngOnInit - called once the comp is initialized, after the constructor
  3. ngDoCheck - executed a lot of times: during every change detection run - checks if something changed
  4. ngAfterContentInit - called after content has been projected into view
  5. ngAfterContentChecked - after content has been checked
  6. ngAfterViewInit - after view has been initialized
  7. ngAfterViewChecked - after view has been checked
  8. ngOnDestroy - once the comp is about to be destroyed

VII. ЗАРЕЖДАНЕ В APP COMP НА ОПРЕДЕЛЕНО СЪДЪРЖАНИЕ
  1. Добавяне в html-файл на (click)="" event с ф-ция onSelect('')
  2. Дефиниране на ф-цията onSelect('') в ts-файла; тук емитваме нов event - вж файла
  
VIII. ЗАРЕЖДАНЕ НА ДЕТАЙЛИ
  1. html на елемента recipes-item -> (click)="onSelected" -> .ts new EventEmitter<void>()

IX. ФОРМИ
  -> взимаме съдържанието, въведено във input на формата:
  1. В app.module, imports: FromModule & import { FormsModule } from '@angular/forms';
  2. .html form -> reference #nameInput, button -> (click)="onAddItem()"
  3. .ts -> @ViewChild('nameInput', { static: false }) nameInputRef: ElementRef; //ViewChild и ElementRef се импортват от '@angular/core'
  4. .ts -> event emitter от тип обект {} или направо модела, ако сме дефинирали типа: @Output() ingredientAdded = new EventEmitter<{name: string, amount: number}>() или <Ingredient>;
  5. Дефинираме ф-цията onAddItem() 
     - да създава нова инстанция на клас Ingredient с аргументи стойностите от полетата
     - да емитва обект с тези стойности: this.ingredientAdded.emit(newIngredient);
  6. В компонентата shopping-list, която имплементира компонентата shopping-edit, вече можем да използваме евента (ingredientAdded)
     - Създаваме (ingredientAdded)="onIngredientAdded($event)"
     - декларираме onIngredientAdded() в .ts-файла, като подаваме аргумент на параметъра ingredient: Ingredient
     - пушваме в масива ingredients новия обект -> this.ingredients.push(ingredient);

X. DIRECTIVES
  = 2 types:
    1/ Attribute directives: [ngStyle], [ngClass]
      - look like a normal HTML attrubute (possibly with databinding or event binding)
      - only affect/change the element they are added to
      ex.: [ngClass]="{odd: odd % 2 !== 0}"
           [ngStyle]="{backgroundColor: odd % 2 !== 0 ? 'yellow' : 'transparent'}"
    2/ Structural directives: *ngFor, *ngIf
      - look like a normal HTML attrubute but have a leading *
      - affect a whole area in the DOM -> elements get added / removed
      ex.: *ngFor="let number of numbers"... {{ number }}
  1. Създаваме нова директива:
      - нова папка app/basic-highligth, нов файл basic-highlight.directive.ts
      - създаваме декоратор @Directive({}), импортваме Directive от @ang/core, експортваме класа
      - в декоратора е задължителен уникален селектор: selector: '[appBasicHighlight]';
      - добавяме конструктор с параметрите (private), които ще приема всяка инстанция на класа
      - имплементираме OnInit -> в ngOnInit достъпваме елемента и променяме стила
  2. Използваме директивата - правим 2 неща:
      - информираме angular, че има нова директива -> в app.module.ts, @NgModule, declarations - добавяме я
      - в app.component.html добавяме директивата в <p appBasicHighlight>
    Но: не е добра практика директно да се достъпват елементи (понякога в сервизи не работим с DOM дърво)
  3. Директива с използване на Renderer 
     = по-добрият начин да достъпваме DOM
     = Renderer2 methods вж. https://angular.io/api/core/Renderer2
      - ng g d better-highlight - може и в самостоятелна папка или отделна папка directives
      - добавяме private параментър от тип Renderer2
      - имплементираме OnInit, защото е добра практика да се инициализира
      - в OnInit сетваме стила: setStyle(), който приема 3 аргумента: елемент, пропърти на стила, стойност
      - инжектираме през друго private пропърти в конструктора референция към елемента, на който ще сетваме стил
  4. Декоратор @HostListener 
     = поставяне на събитие върху елемента, върху който стои директивата
     = може да реагира на всякакви събития
      - в класа на директивата се слага @HostListener('mouseenter') mouseover(eventData: Event) {} 
        <- върху метода, който ще се изпълнява
        <- аргумента на @HostListener('mouseenter') mouseenter е събитие, което се поддържа от DOM елемента, върху който стои събитието
      вж. better-highlight.directive.ts
  5. Декоратор @HostBinding
      - @HostBinding('style.backgroundColor') backgroundColor: string = 'transparent'; <- като аргумент се подава пропъртито, което ще се манипулира, задаваме и начална стойност
      - поставяме го в HostListener-a и задаваме value: this.backgroundColor = 'blue';
  6. Custom property binding
      - добавяме 2 пропъртита, към които можем се bind-ваме отвън:
          @Input() defaultColor: string = 'transparent';
          @Input() highlightColor: string = 'blue';
      - използваме this.defaultColor и this.highlightColor
  7. Own structural directive
      - ng g d unless -> will attach smt if the condition is false
      - @Input() set appUnless(condition: boolean) {} <- ключовата дума set превръща unless() в метод
      - в конструктора приема аргументите: (private templateRef: TemplateRef<any>, private vcRef: ViewContainerRef)
      - TemplateRef<any> - дава ни достъп до темплейта (template is injected), но трябва да се импортне, generic type; templateRef - просто името <-- тук казваме какво искаме да сложим
      - във втората част - vcRef <-- тук казваме къде в документа искаме да сложим директивата
      - createEmbeddedView() - създава view в контейнера
      - директивата се импортва в app.module.ts и се добавя в declarations
      - после на мястото на *ngIf можем да ползваме *appUnless - с обратната проверка
  8. ngSwitch - covers a couple of cases
      - <div [ngSwitch]="value">
          <p *ngSwitchCase="5">Value is 5</p>
          <p *ngSwitchCase="10">Value is 10</p>
          <p *ngSwitchCase="20">Value is 20</p>
          <p *ngSwitchDefault>Value is Default</p>
  9. Създаване на директива, която манипулира бутончето на падащото меню
      - ng g d shared/dropdown --skipTests true
      - да добавим клас, който се ползва при кликване на бутона и се изтрива в обратния случай -> open <- в <div class="btn-group open"> на recipe-detail.component.html
        -> слушаме за клик - добавяме @HostListener('click') toggleOpen() {this.isOpen = !this.isOpen;}
        -> добавяме @HostBinding() <- позвалява ни да се свържем към пропъртита на елемента, върху който е сложена директивата
      - добавяме директивата в app.module.ts: declarations, import
      - вече можем да я използваме:
        -> в recipe-detail.component.html добавяме селектора appDropdown
        -> в header.component.html също добавяме селектора appDropdown
        -> бихме могли да направим да се затваря с клик където и да е в документа -> слагаме listener-а върху документа

XI. SERVICES AND DEPENDANCY INJECTION
  1. Building a service for logging
      - създаваме файл app/logging.service.ts, който експортва клас LogginService
      - добавяме метод logStatusChange(status: string) {console.log('New status: ' + status);}
      - създаване нова инстанция на класа - но това не е правилният начин!
  2. Use a service by dependancy injection - the right way!
    = dependancy injector injects an instance of the class into our component automatically
    = we only need to inform angular that we require such instance
      - add a constructor to the comp where we want to use the service:
        constructor(private loggingService: LoggingService) {}
      - add an extra property to the @Component decorator: providers: [LoggingService]
      - this.loggingService.logStatusChange(accountStatus);
  3. Use a service to store and manage data
      - create an accounts service: app/accounts.service.ts
! The same instance of service is available everywhere when injected, BUT:
  -> за да използваме една и съща инстанция, когато създаваме нов сървис в child компонент - НЕ ТРЯБВА да фигурира в providers!!!
     ако го има в providers, създава се нова инстанция, която не отива към parent елементите и съотв. там не може да се използва
  4. Inject service into a service
      - ако се инжектира в app.module.ts - това е най-високото ниво, тогава навсякъде се ползва тази инстанция
     ! Тогава можем да инжектираме сървиси в сървис
      - @Injectable() - импортва се от @angular/core
  5. Using services for cross-component communication
    - event emitter in a component
    - subscibe() to the event in another component, in the constructor -> this.accountService.statusUpdated.subscribe()
  6. Практика на сървисите
    - решаваме какви сървиси са нужни и намираме подходящо място в проекта - напр. в папката на съответен компонент
    - ако даден сървис се използва от повече компоненти - слага се в app.module.ts

XII. ROUTING
  1. Създаване на рутиране
    - в app.module.ts създаваме const appRoutes: Routes = [{}]; импортва се от @angular/router
    - в масива се слага обект с конфигурациите: path: 'users',  component: UsersComponent
    - в app.module.ts, imports добавяме RouterModule.forRoot(appRoutes), който също се импортва от @angular/router; като аргумент получава const appRoutes
    - в app.component.html на мястото на селекторите добавяме <router-outlet></router-outlet>, което е директива
    -> 1-ви вар.: в a href на app.component.html слагаме адресите към страниците: a href="/", a href="/users"...
    -> 2-ри вар.: с routerLink="/users" или [routerLink]="['/users']" <- по-добрият начин, защото не презарежда страницата!!! или  routerLink="users", ако са елементи на root-компонентата; за nested parts винаги се слага /
    - активният таб да се сетва динамично: вместо css class="active" ползваме routerLinkActive="" <- може в li, може и в routerLink (с bootstrap работи 1-ят вар.)
      ! за да не е active home винаги, трябва да добавим конфигурация: [routerLinkActiveOptions]="{exact: true}"
  2. Programatically route to some page
    = можем да инжектираме рутер в някой от компонентите - напр. home.component.ts
      -> import, constructor, this.router.navigate([])...
      -> without a slash ("/") it turns to a relative component
      -> ActivatedRoute injects the currently active route
          this.router.navigate(['servers'], {relativeTo: this.route}); <- relativeTo - resolves relative routes
  3. Passing parameters to routes
    - app.module.ts, path: {path: 'users/:id', component: UserComponent} - :id is a dynamic piece; за да можем да взимаме името, добавяме и него: users/:id/:name
    - user.component.ts: constructor(private route: ActivatedRoute) {} <- the ActivatedRoute object we injected will give us access to the id passed in the URL => Selected User
    - в ngOnInit: this.user = {id: this.route.snapshot.params['id'], name: ...}
    - в user.component.html: user with id {{ user.id }} loaded
    - в user.component.html: <a [routerLink]="['/users', 10, 'Anna']"></a> <- loads link /users/10/Anna
  ! Observable: 
    = a feature which allows you easy to work with asynchronous task;
    = an easy way to subscribe to some event which might happen and then execute some code
  4. Passing query parameters and fragments
    ex.: localhost:4200/users/10/Anna?mode=editing#loading
    - в app.module.ts: {path: 'servers/:id/edit', component: EditServerComponent}
    - в servers.component.html: 
        [routerLink]="['/servers', 5, 'edit']"
        [queryParams]="{allowEdit: '1'}" <- it is a bindable property of the routerLink directive adds ?allowEdit=1 to the address
        fragment="loading" <-adds #loading to the address
    - do the same programmatically: 
        -> in home.component.html: (click)="onLoadServers(1)"
        -> in home.component.ts: onLoadServers(id: number) {this.router.navigate(['/servers', id, 'edit'], {queryParams: {allowEdit: '1'}, fragment: 'loading'});}
  5. Retrieving query params
    - get access: in edit-server.component.ts, constructor: private route: ActivatedRoute
    - in edit-server.component.ts, ngOnInit: 
      1st approach: does not allow you to react to any changes after the comp has been loaded
          console.log(this.route.snapshot.queryParams);
          console.log(this.route.snapshot.fragment);
      2nd approach: allows you to react to queryParams changes
          this.route.queryParams.subscribe();
          this.route.fragment.subscribe();
  6. Nested routing
    = child comp load inside the parent comp and not in separate pages
    - app.module.ts: 3rd param in routes: children: [...] <- child routes are inside w/o the name of the parent route
    - in servers.component.html instead of child comp selectors: <router-outlet></router-outlet>
  ! queryParamsHandling: 'preserve' (or 'merge') prop -> we preserve old params properties
  7. Redirecting and wildcard routes
    - add a new component: ng g c page-not-found
    - app.module.ts: 
      -> {path: 'not-found', component: PageNotFoundComponent}
      -> {path: '**', redirectTo: '/not-found'} //at the last of all paths!!!
  8. Outsourcing the route configuration
    = app.routing.module.ts <- tipically
    - all routes are pasted here
    - add all imports: Ctrl + .
    - remove RouterModule.forRoot(appRoutes) from app.module.ts
    - add RouterModule in imports
    - add in declarations:  imports: [RouterModule.forRoot(appRoutes)]
    - add exports: [RouterModule]
    - add AppRoutingModule in imports of app.module.ts
  9. Routing guards